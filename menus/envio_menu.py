"""
M√≥dulo para el men√∫ de registro de env√≠os para empleados.
"""

from typing import Dict, Any, Optional, List
from sqlalchemy.orm import Session
from uuid import UUID, uuid4
from datetime import datetime, date

from cruds.sede_crud import sede as sede_crud
from cruds.cliente_crud import cliente as cliente_crud
from cruds.paquete_crud import paquete as paquete_crud
from cruds.tipo_documento_crud import tipo_documento as tipo_documento_crud
from services.servicio_mensajeria import (
    ServicioMensajeria, 
    Coordenada, 
    ParametrosEnvio, 
    TipoEnvio, 
    Tama√±oPaquete
)
from entities.paquete import PaqueteCreate
from entities.cliente import ClienteCreate


def mostrar_encabezado(titulo: str = ""):
    """Muestra un encabezado formateado."""
    print("\n" + "=" * 80)
    if titulo:
        print(f"{titulo:^80}")
        print("=" * 80)


def buscar_o_crear_cliente(db: Session) -> Optional[Any]:
    """
    Permite buscar un cliente existente o crear uno nuevo.
    
    Args:
        db: Sesi√≥n de base de datos
        
    Returns:
        Cliente seleccionado o None si se cancela
    """
    print("\n" + "=" * 60)
    print("SELECCIONAR CLIENTE PARA EL ENV√çO")
    print("=" * 60)
    print("1. Buscar cliente existente")
    print("2. Registrar nuevo cliente")
    print("0. Cancelar")
    
    while True:
        opcion = input("\nSeleccione una opci√≥n: ").strip()
        
        if opcion == "0":
            return None
        elif opcion == "1":
            return buscar_cliente_existente(db)
        elif opcion == "2":
            return crear_nuevo_cliente(db)
        else:
            print("Opci√≥n inv√°lida. Intente nuevamente.")


def buscar_cliente_existente(db: Session) -> Optional[Any]:
    """
    Busca un cliente existente por documento o nombre.
    
    Args:
        db: Sesi√≥n de base de datos
        
    Returns:
        Cliente encontrado o None
    """
    print("\nBUSCAR CLIENTE EXISTENTE")
    print("-" * 30)
    print("1. Buscar por n√∫mero de documento")
    print("2. Buscar por nombre")
    print("0. Volver")
    
    while True:
        opcion = input("\nSeleccione m√©todo de b√∫squeda: ").strip()
        
        if opcion == "0":
            return None
        elif opcion == "1":
            documento = input("Ingrese n√∫mero de documento: ").strip()
            if documento:
                cliente = cliente_crud.obtener_por_documento(db, documento)
                if cliente:
                    mostrar_info_cliente(cliente)
                    confirmar = input("\n¬øEs este el cliente correcto? (s/n): ").strip().lower()
                    if confirmar in ['s', 'si', 's√≠']:
                        return cliente
                    else:
                        continue
                else:
                    print("No se encontr√≥ cliente con ese documento.")
                    crear = input("¬øDesea crear un nuevo cliente? (s/n): ").strip().lower()
                    if crear in ['s', 'si', 's√≠']:
                        return crear_nuevo_cliente(db)
        elif opcion == "2":
            nombre = input("Ingrese nombre del cliente: ").strip()
            if nombre:
                clientes = cliente_crud.buscar_por_nombre(db, nombre)
                if clientes:
                    return seleccionar_de_lista_clientes(clientes)
                else:
                    print("No se encontraron clientes con ese nombre.")
        else:
            print("Opci√≥n inv√°lida.")


def seleccionar_de_lista_clientes(clientes: List[Any]) -> Optional[Any]:
    """
    Muestra una lista de clientes para seleccionar.
    
    Args:
        clientes: Lista de clientes encontrados
        
    Returns:
        Cliente seleccionado o None
    """
    print(f"\nSe encontraron {len(clientes)} cliente(s):")
    print("-" * 80)
    print(f"{'#':<3} | {'NOMBRE':<30} | {'DOCUMENTO':<15} | {'TEL√âFONO':<15}")
    print("-" * 80)
    
    for i, cliente in enumerate(clientes, 1):
        nombre_completo = f"{cliente.primer_nombre} {cliente.primer_apellido}"
        documento = getattr(cliente, 'numero_documento', 'N/A')
        telefono = getattr(cliente, 'telefono', 'N/A')
        print(f"{i:<3} | {nombre_completo[:28]:<30} | {documento:<15} | {telefono:<15}")
    
    while True:
        try:
            opcion = input(f"\nSeleccione cliente (1-{len(clientes)}) o 0 para cancelar: ").strip()
            if opcion == "0":
                return None
            
            indice = int(opcion) - 1
            if 0 <= indice < len(clientes):
                return clientes[indice]
            else:
                print(f"Opci√≥n inv√°lida. Ingrese un n√∫mero entre 1 y {len(clientes)}")
        except ValueError:
            print("Por favor ingrese un n√∫mero v√°lido.")


def crear_nuevo_cliente(db: Session) -> Optional[Any]:
    """
    Crea un nuevo cliente para el env√≠o.
    
    Args:
        db: Sesi√≥n de base de datos
        
    Returns:
        Cliente creado o None si se cancela
    """
    print("\nREGISTRAR NUEVO CLIENTE")
    print("-" * 30)
    
    try:
         
        tipos_documento = tipo_documento_crud.obtener_todos(db)
        if not tipos_documento:
            print("Error: No hay tipos de documento configurados.")
            return None
        
        print("Tipos de documento disponibles:")
        for i, tipo in enumerate(tipos_documento, 1):
            print(f"{i}. {tipo.nombre}")
        
        while True:
            try:
                opcion = int(input(f"Seleccione tipo de documento (1-{len(tipos_documento)}): "))
                if 1 <= opcion <= len(tipos_documento):
                    tipo_documento = tipos_documento[opcion - 1]
                    break
                else:
                    print(f"Opci√≥n inv√°lida. Ingrese un n√∫mero entre 1 y {len(tipos_documento)}")
            except ValueError:
                print("Por favor ingrese un n√∫mero v√°lido.")
        
        numero_documento = input("N√∫mero de documento: ").strip()
        primer_nombre = input("Primer nombre: ").strip()
        segundo_nombre = input("Segundo nombre (opcional): ").strip() or None
        primer_apellido = input("Primer apellido: ").strip()
        segundo_apellido = input("Segundo apellido (opcional): ").strip() or None
        telefono = input("Tel√©fono: ").strip()
        correo = input("Correo electr√≥nico: ").strip()
        direccion = input("Direcci√≥n: ").strip()
        
        if not all([numero_documento, primer_nombre, primer_apellido, telefono, correo, direccion]):
            print("Error: Todos los campos obligatorios deben ser completados.")
            return None
        
            cliente_data = ClienteCreate(
            primer_nombre=primer_nombre,
            segundo_nombre=segundo_nombre,
            primer_apellido=primer_apellido,
            segundo_apellido=segundo_apellido,
            numero_documento=numero_documento,
            direccion=direccion,
            telefono=telefono,
            correo=correo,
            tipo="remitente",
            id_tipo_documento=str(tipo_documento.id_tipo_documento)
        )
        
        from cruds.usuario_crud import usuario as usuario_crud
        from entities.usuario import UsuarioCreate
        from auth.security import obtener_id_rol
        
        rol_cliente_id = obtener_id_rol(db, "cliente")
        if not rol_cliente_id:
            print("Error: No se encontr√≥ el rol de cliente.")
            return None
        
         
        nombre_usuario = f"{primer_nombre.lower()}.{primer_apellido.lower()}.{numero_documento[-4:]}"
        password_temporal = f"temp{numero_documento[-4:]}"
        
        usuario_data = UsuarioCreate(
            nombre_usuario=nombre_usuario,
            password=password_temporal,
            id_rol=str(rol_cliente_id)
        )
        
        usuario = usuario_crud.crear_usuario(db, datos_usuario=usuario_data)
        if not usuario:
            print("Error: No se pudo crear el usuario para el cliente.")
            return None
        
        cliente = cliente_crud.crear(
            db, 
            datos_entrada=cliente_data, 
            usuario_id=usuario.id_usuario
        )
        
        if cliente:
            print(f"\n‚úÖ Cliente creado exitosamente!")
            print(f"Usuario: {nombre_usuario}")
            print(f"Contrase√±a temporal: {password_temporal}")
            mostrar_info_cliente(cliente)
            return cliente
        else:
            print("Error: No se pudo crear el cliente.")
            return None
            
    except Exception as e:
        print(f"Error al crear cliente: {str(e)}")
        return None


def mostrar_info_cliente(cliente: Any):
    """
    Muestra la informaci√≥n de un cliente.
    
    Args:
        cliente: Objeto cliente
    """
    print(f"\nüìã INFORMACI√ìN DEL CLIENTE:")
    nombre_completo = f"{cliente.primer_nombre} {cliente.segundo_nombre or ''} {cliente.primer_apellido} {cliente.segundo_apellido or ''}".strip()
    print(f"   Nombre: {nombre_completo}")
    print(f"   Documento: {getattr(cliente, 'numero_documento', 'N/A')}")
    print(f"   Tel√©fono: {getattr(cliente, 'telefono', 'N/A')}")
    print(f"   Correo: {getattr(cliente, 'correo', 'N/A')}")
    print(f"   Direcci√≥n: {getattr(cliente, 'direccion', 'N/A')}")


def seleccionar_sede_con_coordenadas(db: Session, titulo: str) -> Optional[Any]:
    """
    Permite seleccionar una sede que tenga coordenadas configuradas.
    
    Args:
        db: Sesi√≥n de base de datos
        titulo: T√≠tulo para mostrar
        
    Returns:
        Sede seleccionada o None
    """
    print(f"\n{titulo}")
    print("-" * 50)
    
    sedes = sede_crud.obtener_activas(db)
    if not sedes:
        print("No hay sedes disponibles.")
        return None
    
     
    sedes_con_coordenadas = [
        sede for sede in sedes 
        if hasattr(sede, 'latitud') and sede.latitud is not None
    ]
    
    if not sedes_con_coordenadas:
        print("No hay sedes con coordenadas configuradas.")
        print("Las coordenadas son necesarias para calcular costos de env√≠o.")
        return None
    
    print(f"{'#':<3} | {'NOMBRE':<25} | {'CIUDAD':<15} | {'COORDENADAS':<20}")
    print("-" * 70)
    
    for i, sede in enumerate(sedes_con_coordenadas, 1):
        lat = round(sede.latitud, 4)
        lng = round(sede.longitud, 4) if sede.longitud else 0
        alt = round(sede.altitud, 0) if sede.altitud else 0
        coordenadas = f"{lat},{lng},{alt}m"
        
        print(f"{i:<3} | {sede.nombre[:23]:<25} | {sede.ciudad[:13]:<15} | {coordenadas:<20}")
    
    while True:
        try:
            opcion = input(f"\nSeleccione sede (1-{len(sedes_con_coordenadas)}) o 0 para cancelar: ").strip()
            if opcion == "0":
                return None
            
            indice = int(opcion) - 1
            if 0 <= indice < len(sedes_con_coordenadas):
                return sedes_con_coordenadas[indice]
            else:
                print(f"Opci√≥n inv√°lida. Ingrese un n√∫mero entre 1 y {len(sedes_con_coordenadas)}")
        except ValueError:
            print("Por favor ingrese un n√∫mero v√°lido.")


def capturar_datos_paquete() -> Optional[Dict[str, Any]]:
    """
    Captura los datos del paquete para el env√≠o.
    
    Returns:
        Diccionario con datos del paquete o None si se cancela
    """
    print("\nDATOS DEL PAQUETE")
    print("-" * 30)
    
    contenido = input("Descripci√≥n del contenido: ").strip()
    if not contenido:
        print("La descripci√≥n del contenido es obligatoria.")
        return None
    
     
    while True:
        try:
            peso_str = input("Peso del paquete (kg): ").strip()
            if not peso_str:
                print("El peso es obligatorio.")
                continue
            peso = float(peso_str)
            if peso <= 0:
                print("El peso debe ser mayor a 0.")
                continue
            if peso > 50:
                print("El peso m√°ximo permitido es 50 kg.")
                continue
            break
        except ValueError:
            print("Por favor ingrese un n√∫mero v√°lido.")
    
     
    print("\nTama√±os disponibles:")
    tama√±os = list(Tama√±oPaquete)
    for i, tama√±o in enumerate(tama√±os, 1):
        print(f"{i}. {tama√±o.value.title()}")
    
    while True:
        try:
            opcion = int(input(f"Seleccione tama√±o (1-{len(tama√±os)}): "))
            if 1 <= opcion <= len(tama√±os):
                tama√±o = tama√±os[opcion - 1]
                break
            else:
                print(f"Opci√≥n inv√°lida. Ingrese un n√∫mero entre 1 y {len(tama√±os)}")
        except ValueError:
            print("Por favor ingrese un n√∫mero v√°lido.")
    
    print("\nTipos de env√≠o disponibles:")
    tipos = list(TipoEnvio)
    for i, tipo in enumerate(tipos, 1):
        print(f"{i}. {tipo.value.title()}")
    
    while True:
        try:
            opcion = int(input(f"Seleccione tipo de env√≠o (1-{len(tipos)}): "))
            if 1 <= opcion <= len(tipos):
                tipo_envio = tipos[opcion - 1]
                break
            else:
                print(f"Opci√≥n inv√°lida. Ingrese un n√∫mero entre 1 y {len(tipos)}")
        except ValueError:
            print("Por favor ingrese un n√∫mero v√°lido.")
    
 
    while True:
        fragil_str = input("¬øEs un paquete fr√°gil? (s/n): ").strip().lower()
        if fragil_str in ['s', 'si', 's√≠']:
            fragilidad = "alta"
            es_fragil = True
            break
        elif fragil_str in ['n', 'no']:
            fragilidad = "normal"
            es_fragil = False
            break
        else:
            print("Por favor responda 's' para s√≠ o 'n' para no.")
    
 
    while True:
        try:
            valor_str = input("Valor declarado para seguro (opcional, presione Enter para omitir): ").strip()
            if not valor_str:
                valor_declarado = 0.0
                break
            valor_declarado = float(valor_str)
            if valor_declarado < 0:
                print("El valor declarado no puede ser negativo.")
                continue
            break
        except ValueError:
            print("Por favor ingrese un n√∫mero v√°lido.")
    
    return {
        "contenido": contenido,
        "peso": peso,
        "tama√±o": tama√±o.value,
        "tipo_envio": tipo_envio.value,
        "fragilidad": fragilidad,
        "es_fragil": es_fragil,
        "valor_declarado": valor_declarado,
        "tama√±o_enum": tama√±o,
        "tipo_envio_enum": tipo_envio
    }


def mostrar_resumen_envio(cliente: Any, sede_origen: Any, sede_destino: Any, 
                         datos_paquete: Dict[str, Any], cotizacion: Dict[str, Any]):
    """
    Muestra el resumen completo del env√≠o antes de confirmar.
    
    Args:
        cliente: Cliente del env√≠o
        sede_origen: Sede de origen
        sede_destino: Sede de destino
        datos_paquete: Datos del paquete
        cotizacion: Cotizaci√≥n calculada
    """
    print("\n" + "=" * 80)
    print("RESUMEN DEL ENV√çO")
    print("=" * 80)
    
 
    nombre_cliente = f"{cliente.primer_nombre} {cliente.primer_apellido}"
    print(f"\nüë§ CLIENTE:")
    print(f"   Nombre: {nombre_cliente}")
    print(f"   Documento: {getattr(cliente, 'numero_documento', 'N/A')}")
    print(f"   Tel√©fono: {getattr(cliente, 'telefono', 'N/A')}")
    
    
    print(f"\nüìç RUTA:")
    print(f"   Origen: {sede_origen.nombre} - {sede_origen.ciudad}")
    print(f"   Destino: {sede_destino.nombre} - {sede_destino.ciudad}")
    print(f"   Distancia: {cotizacion['distancia_km']} km")
    
    
    print(f"\nüì¶ PAQUETE:")
    print(f"   Contenido: {datos_paquete['contenido']}")
    print(f"   Peso: {datos_paquete['peso']} kg")
    print(f"   Tama√±o: {datos_paquete['tama√±o'].title()}")
    print(f"   Tipo de env√≠o: {datos_paquete['tipo_envio'].title()}")
    print(f"   Fragilidad: {'Alta' if datos_paquete['es_fragil'] else 'Normal'}")
    if datos_paquete['valor_declarado'] > 0:
        print(f"   Valor declarado: ${datos_paquete['valor_declarado']:,.0f}")
    
    
    print(f"\nüí∞ COSTOS:")
    print(f"   Costo total: ${cotizacion['costo_total']:,.0f}")
    print(f"   Tiempo estimado: {cotizacion['tiempo_promedio_horas']} horas")
    
    print("=" * 80)


def registrar_envio_completo(db: Session, empleado_data: Dict[str, Any]) -> None:
    """
    Funci√≥n principal para registrar un env√≠o completo.
    
    Args:
        db: Sesi√≥n de base de datos
        empleado_data: Datos del empleado que registra el env√≠o
    """
    mostrar_encabezado("REGISTRAR NUEVO ENV√çO")
    
    try:
        
        print("PASO 1: SELECCIONAR CLIENTE")
        cliente = buscar_o_crear_cliente(db)
        if not cliente:
            print("Operaci√≥n cancelada.")
            input("\nPresione Enter para continuar...")
            return
        
        
        print("\nPASO 2: SELECCIONAR SEDE DE ORIGEN")
        sede_origen = seleccionar_sede_con_coordenadas(db, "SEDE DE ORIGEN")
        if not sede_origen:
            print("Operaci√≥n cancelada.")
            input("\nPresione Enter para continuar...")
            return
        
        
        print("\nPASO 3: SELECCIONAR SEDE DE DESTINO")
        sede_destino = seleccionar_sede_con_coordenadas(db, "SEDE DE DESTINO")
        if not sede_destino:
            print("Operaci√≥n cancelada.")
            input("\nPresione Enter para continuar...")
            return
        
        if sede_origen.id_sede == sede_destino.id_sede:
            print("Error: La sede de origen y destino no pueden ser la misma.")
            input("\nPresione Enter para continuar...")
            return
        
        
        print("\nPASO 4: DATOS DEL PAQUETE")
        datos_paquete = capturar_datos_paquete()
        if not datos_paquete:
            print("Operaci√≥n cancelada.")
            input("\nPresione Enter para continuar...")
            return
        
        
        print("\nPASO 5: CALCULANDO COSTO DEL ENV√çO...")
        
        coord_origen = Coordenada(
            latitud=sede_origen.latitud,
            longitud=sede_origen.longitud,
            altitud=sede_origen.altitud or 0
        )
        
        coord_destino = Coordenada(
            latitud=sede_destino.latitud,
            longitud=sede_destino.longitud,
            altitud=sede_destino.altitud or 0
        )
        
        parametros = ParametrosEnvio(
            peso_kg=datos_paquete['peso'],
            tama√±o=datos_paquete['tama√±o_enum'],
            tipo_envio=datos_paquete['tipo_envio_enum'],
            es_fragil=datos_paquete['es_fragil'],
            valor_declarado=datos_paquete['valor_declarado']
        )
        
        cotizacion = ServicioMensajeria.generar_cotizacion_completa(
            coord_origen, coord_destino, parametros
        )
        
        
        print("\nPASO 6: CONFIRMACI√ìN")
        mostrar_resumen_envio(cliente, sede_origen, sede_destino, datos_paquete, cotizacion)
        
        confirmar = input("\n¬øConfirma el registro de este env√≠o? (s/n): ").strip().lower()
        if confirmar not in ['s', 'si', 's√≠']:
            print("Env√≠o cancelado.")
            input("\nPresione Enter para continuar...")
            return
        
        
        print("\nPASO 7: REGISTRANDO ENV√çO...")
        
        paquete_data = PaqueteCreate(
            peso=datos_paquete['peso'],
            tama√±o=datos_paquete['tama√±o'],
            fragilidad=datos_paquete['fragilidad'],
            contenido=datos_paquete['contenido'],
            tipo=datos_paquete['tipo_envio']
        )
        
        datos_adicionales = {
            "id_paquete": str(uuid4()),
            "id_cliente": str(cliente.id_cliente),
            "costo_envio": cotizacion['costo_total'],
            "sede_origen": str(sede_origen.id_sede),
            "sede_destino": str(sede_destino.id_sede),
            "distancia_km": cotizacion['distancia_km'],
            "tiempo_estimado_horas": cotizacion['tiempo_promedio_horas']
        }
        
        datos_creacion = {
            **paquete_data.dict(),
            **datos_adicionales,
            "creado_por": empleado_data["id_usuario"],
        }
        
        nuevo_paquete = paquete_crud.crear_registro(
            db=db, 
            datos_entrada=datos_creacion, 
            creado_por=empleado_data["id_usuario"]
        )
        
        if nuevo_paquete:
            print(f"\  ¬°ENV√çO REGISTRADO EXITOSAMENTE!")
            print(f"  N√∫mero de seguimiento: {nuevo_paquete.id_paquete}")
            print(f"  Costo total: ${cotizacion['costo_total']:,.0f}")
            print(f"  Tiempo estimado: {cotizacion['tiempo_promedio_horas']} horas")
            print(f"  Cliente: {cliente.primer_nombre} {cliente.primer_apellido}")
        else:
            print("‚ùå Error: No se pudo registrar el env√≠o.")
        
    except Exception as e:
        print(f"\n‚ùå Error al registrar env√≠o: {str(e)}")
    
    input("\nPresione Enter para continuar...")
